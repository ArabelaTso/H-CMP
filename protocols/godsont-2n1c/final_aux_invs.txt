rule_1: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> replace != RANDOM
rule_2: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCNFR
rule_3: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> replace != TOREP
rule_4: replace = RANDINV -> repRule != LCFR
rule_5: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID & replace = RANDINV -> repRule != LNCNFR
rule_6: replace = RANDINV -> repRule != LNCNFR
rule_7: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID & replace = RANDINV -> repRule != LCFR
rule_8: replace = REQUIRE -> repRule != LCFR
rule_9: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & replace = REQUIRE -> repRule != LCFR
rule_10: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY & curCache = TYPE_CACHE_1 -> repRule != LNCNFR
rule_11: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY -> repRule != LNCNFR
rule_12: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY & replace = DESIGNATED -> repRule != LNCNFR
rule_13: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY & replace = DESIGNATED -> repRule != LCFR
rule_14: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY -> repRule != LNCNFR
rule_15: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY & replace = DESIGNATED -> repRule != LNCFR
rule_16: replace = TOREP & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCFR
rule_17: replace = TOREP & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_18: curCache = TYPE_CACHE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_19: replace = TOREP -> repRule != LNCFR
rule_20: replace = TOREP -> repRule != LCFR
rule_21: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_22: replace = TOREP -> repRule != LNCNFR
rule_23: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_24: replace = TOREP & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LCFR
rule_25: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace = REQREPALL -> repRule != NLNCR
rule_26: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY & replace = REQREPALL -> repRule != NLNCR
rule_27: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace = REQREPALL -> repRule != LNCNFR
rule_28: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace = REQREPALL -> repRule != NLNCW
rule_29: replace = REQREPALL -> repRule != NLNCR
rule_30: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY & replace = REQREPALL -> repRule != NLNCW
rule_31: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_32: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY -> repRule != LNCNFR
rule_33: replace = REQREPALL -> repRule != LNCNFR
rule_34: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_35: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = DIRTY & replace = REQREPALL -> repRule != LNCNFR
rule_36: replace = REQREPALL -> repRule != NLNCW
rule_37: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCW
rule_38: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LCFR
rule_39: replace = NON -> repRule != NLNCW
rule_40: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCFR
rule_41: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCNFR
rule_42: replace = NON -> repRule != LNCFR
rule_43: replace = NON -> repRule != LNCNFR
rule_44: replace = NON -> repRule != NLNCR
rule_45: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCNFR
rule_46: replace = NON -> repRule != LCFR
rule_47: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCFR
rule_48: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCR
rule_49: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != NLNCW
rule_50: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LCFR
rule_51: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != NLNCR
rule_52: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCW
rule_53: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCFR
rule_54: replace = NON -> repRule != NLNCW
rule_55: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCW
rule_56: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCFR
rule_57: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCNFR
rule_58: replace = NON -> repRule != LNCFR
rule_59: replace = NON -> repRule != LNCNFR
rule_60: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LCFR
rule_61: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCR
rule_62: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_63: replace = NON -> repRule != LCFR
rule_64: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCR
rule_65: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LCFR
rule_66: replace = NON -> repRule != NLNCR
rule_67: repRule = NLNCR -> replace != NON
rule_68: repRule = NLNCR -> replace != REQREPALL
rule_69: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != NLNCR
rule_70: node[TYPE_NODE_1].hasLock = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_71: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LCFR
rule_72: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_73: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCFR
rule_74: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != NLNCW
rule_75: replace = NON -> repRule != LNCNFR
rule_76: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LCFR
rule_77: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_78: replace = NON -> repRule != NLNCR
rule_79: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_80: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_81: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != NLNCR
rule_82: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCFR
rule_83: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LCFR
rule_84: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LNCFR
rule_85: replace = NON -> repRule != LCFR
rule_86: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_87: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCFR
rule_88: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_89: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCW
rule_90: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != NLNCR
rule_91: replace = NON -> repRule != NLNCW
rule_92: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCNFR
rule_93: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != NLNCW
rule_94: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LCFR
rule_95: replace = NON -> repRule != LNCFR
rule_96: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_97: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != NLNCW
rule_98: node[TYPE_NODE_1].hasLock = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_99: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCR
rule_100: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCFR
rule_101: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != NLNCW
rule_102: replace = NON -> repRule != LNCNFR
rule_103: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LCFR
rule_104: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != NLNCW
rule_105: replace = NON -> repRule != NLNCR
rule_106: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LCFR
rule_107: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LNCFR
rule_108: replace = NON -> repRule != LCFR
rule_109: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_110: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCW
rule_111: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != NLNCR
rule_112: replace = NON -> repRule != NLNCW
rule_113: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCNFR
rule_114: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LCFR
rule_115: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCNFR
rule_116: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCFR
rule_117: replace = NON -> repRule != LNCFR
rule_118: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != NLNCR
rule_119: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCR
rule_120: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCFR
rule_121: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCW
rule_122: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCFR
rule_123: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != NLNCW
rule_124: replace = NON -> repRule != LNCNFR
rule_125: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LCFR
rule_126: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LCFR
rule_127: replace = NON -> repRule != NLNCR
rule_128: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LNCFR
rule_129: replace = NON -> repRule != LCFR
rule_130: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_131: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCW
rule_132: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != NLNCR
rule_133: replace = NON -> repRule != NLNCW
rule_134: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCNFR
rule_135: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCR
rule_136: replace = NON & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false -> repRule != LCFR
rule_137: replace = NON -> repRule != LNCFR
rule_138: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_139: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCR
rule_140: repRule = NLNCW & curMemory = TYPE_ADDR_1 -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false
rule_141: repRule = NLNCW -> replace != REQREPALL
rule_142: repRule = NLNCW -> replace != NON
rule_143: repRule = NLNCW & curMemory = TYPE_ADDR_1 -> lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = false
rule_144: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != NLNCR
rule_145: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LCFR
rule_146: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_147: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_148: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LCFR
rule_149: replace = NON -> repRule != LNCNFR
rule_150: lock[TYPE_LOCK_1].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_151: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCW
rule_152: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LNCFR
rule_153: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_154: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_155: replace = NON -> repRule != NLNCR
rule_156: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_157: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_158: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCW
rule_159: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_160: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != NLNCR
rule_161: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCFR
rule_162: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LCFR
rule_163: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCFR
rule_164: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCR
rule_165: replace = NON -> repRule != LCFR
rule_166: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCFR
rule_167: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_168: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> replace != TOREP
rule_169: replace = NON -> repRule != NLNCW
rule_170: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_171: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCR
rule_172: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCR
rule_173: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_174: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != NLNCW
rule_175: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCFR
rule_176: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != NLNCR
rule_177: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> replace != TOREP
rule_178: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCW
rule_179: replace = NON -> repRule != LNCFR
rule_180: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_181: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_182: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != NLNCW
rule_183: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCFR
rule_184: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LCFR
rule_185: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LCFR
rule_186: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != NLNCW
rule_187: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LCFR
rule_188: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_189: repRule = LCFR -> replace != RANDINV
rule_190: repRule = LCFR -> replace != TOREP
rule_191: repRule = LCFR -> replace != REQUIRE
rule_192: repRule = LCFR -> replace != RANDOM
rule_193: repRule = LCFR -> replace != NON
rule_194: repRule = LCFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY
rule_195: repRule = LCFR & curLock = TYPE_LOCK_1 -> lock[TYPE_LOCK_1].beUsed = true
rule_196: repRule = LCFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY
rule_197: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCFR
rule_198: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LCFR
rule_199: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCW
rule_200: replace = NON -> repRule != LNCNFR
rule_201: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LCFR
rule_202: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCW
rule_203: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LNCFR
rule_204: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_205: replace = NON -> repRule != NLNCR
rule_206: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCW
rule_207: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCFR
rule_208: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCR
rule_209: replace = NON -> repRule != LCFR
rule_210: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LCFR
rule_211: replace = NON -> repRule != NLNCW
rule_212: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_213: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCR
rule_214: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCR
rule_215: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_216: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCR
rule_217: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCFR
rule_218: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != NLNCR
rule_219: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCW
rule_220: replace = NON -> repRule != LNCFR
rule_221: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_222: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != NLNCW
rule_223: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCFR
rule_224: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_225: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LCFR
rule_226: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LCFR
rule_227: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCFR
rule_228: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LCFR
rule_229: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCW
rule_230: replace = NON -> repRule != LNCNFR
rule_231: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LCFR
rule_232: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCW
rule_233: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LNCFR
rule_234: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_235: replace = NON -> repRule != NLNCR
rule_236: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCW
rule_237: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCFR
rule_238: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCR
rule_239: replace = NON -> repRule != LCFR
rule_240: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LCFR
rule_241: replace = NON -> repRule != NLNCW
rule_242: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_243: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCR
rule_244: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCR
rule_245: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_246: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCR
rule_247: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCFR
rule_248: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != NLNCR
rule_249: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCW
rule_250: replace = NON -> repRule != LNCFR
rule_251: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_252: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != NLNCW
rule_253: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCFR
rule_254: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_255: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LCFR
rule_256: replace = NON & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = true -> repRule != LCFR
rule_257: repRule = LNCFR -> replace != TOREP
rule_258: repRule = LNCFR -> replace != NON
rule_259: repRule = LNCFR & curLock = TYPE_LOCK_1 -> lock[TYPE_LOCK_1].beUsed = true
rule_260: repRule = LNCFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY
rule_261: repRule = LNCFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY
rule_262: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LCFR
rule_263: replace = NON -> repRule != LNCNFR
rule_264: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> replace != TOREP
rule_265: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCW
rule_266: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_267: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != NLNCW
rule_268: replace = NON -> repRule != NLNCR
rule_269: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_270: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LCFR
rule_271: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCW
rule_272: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCFR
rule_273: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCR
rule_274: replace = NON -> repRule != LCFR
rule_275: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != NLNCR
rule_276: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != LCFR
rule_277: replace = NON -> repRule != NLNCW
rule_278: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != LNCNFR
rule_279: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCR
rule_280: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCR
rule_281: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_282: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCNFR
rule_283: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCFR
rule_284: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != NLNCW
rule_285: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCFR
rule_286: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCW
rule_287: replace = NON -> repRule != LNCFR
rule_288: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_289: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCFR
rule_290: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LCFR
rule_291: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].hasLock = true -> replace != TOREP
rule_292: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LCFR
rule_293: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != NLNCR
rule_294: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != LNCFR
rule_295: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCNFR
rule_296: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCFR
rule_297: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LCFR
rule_298: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCW
rule_299: replace = NON -> repRule != LNCNFR
rule_300: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LCFR
rule_301: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCW
rule_302: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_303: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_304: replace = NON -> repRule != NLNCR
rule_305: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCW
rule_306: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCFR
rule_307: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCR
rule_308: replace = NON -> repRule != LCFR
rule_309: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != NLNCR
rule_310: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != LCFR
rule_311: replace = NON -> repRule != NLNCW
rule_312: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != LNCNFR
rule_313: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCR
rule_314: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCR
rule_315: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_316: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCR
rule_317: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_318: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != NLNCW
rule_319: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCFR
rule_320: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCW
rule_321: replace = NON -> repRule != LNCFR
rule_322: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_323: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCFR
rule_324: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LCFR
rule_325: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_326: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LCFR
rule_327: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & replace = NON -> repRule != LNCFR
rule_328: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].hasLock = true -> replace != TOREP
rule_329: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_330: curData != TYPE_DATA_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_331: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_332: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_333: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_334: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_335: node[TYPE_NODE_2].hasLock = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_336: curLock = TYPE_LOCK_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_337: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_338: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_339: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_340: curCache = TYPE_CACHE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_341: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_342: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_343: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_344: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_345: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].hasLock = true -> repRule != LNCNFR
rule_346: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_347: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_348: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_349: repRule = LNCNFR & curMemory = TYPE_ADDR_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1
rule_350: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_351: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != DIRTY & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_352: curMemory != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_353: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_354: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_355: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_356: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_357: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_358: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_359: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_360: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_361: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_362: curMemory != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_363: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_364: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY -> repRule != LNCNFR
rule_365: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_366: curLock != TYPE_LOCK_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_367: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_368: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_369: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_370: replace != REQREPALL & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_371: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_372: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curMemory = TYPE_ADDR_2 -> repRule != LNCNFR
rule_373: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_374: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_375: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_376: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_377: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_378: curNode != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_379: curLock != TYPE_LOCK_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_380: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_381: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_382: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_383: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_384: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_385: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curLock = TYPE_LOCK_2 -> repRule != LNCNFR
rule_386: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_387: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_388: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_389: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_390: repRule = LNCNFR & replace = DONE -> lock[TYPE_LOCK_1].owner != TYPE_NODE_1
rule_391: repRule = LNCNFR & curNode = TYPE_NODE_1 -> lock[TYPE_LOCK_1].owner != TYPE_NODE_2
rule_392: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_393: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curNode != TYPE_NODE_2 -> repRule != LNCNFR
rule_394: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_395: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_396: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY
rule_397: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].beUsed = true -> repRule != LNCNFR
rule_398: curData = TYPE_DATA_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_399: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_400: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_401: repRule = LNCNFR -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2
rule_402: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].hasLock = true -> repRule != LNCNFR
rule_403: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_404: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_405: curData = TYPE_DATA_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_406: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_407: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_408: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curData = TYPE_DATA_2 -> repRule != LNCNFR
rule_409: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_410: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_411: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_412: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_413: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_414: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_415: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_416: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_417: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace != RANDINV -> repRule != LNCNFR
rule_418: lock[TYPE_LOCK_2].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_419: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_420: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_421: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_422: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_423: node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_424: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != DIRTY -> repRule != LNCNFR
rule_425: replace != NON & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_426: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_427: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_428: curCache = TYPE_CACHE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_429: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_430: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_431: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_432: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_433: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_434: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_435: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1
rule_436: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_437: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_438: curData != TYPE_DATA_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_439: curLock != TYPE_LOCK_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_440: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_441: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_442: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_443: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curCache = TYPE_CACHE_1 -> repRule != LNCNFR
rule_444: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_445: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_446: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_447: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_448: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_449: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_450: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_451: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_452: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_453: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_454: lock[TYPE_LOCK_2].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_455: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_456: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_457: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_458: curData != TYPE_DATA_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_459: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_460: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_461: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_462: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_463: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_464: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_465: repRule = LNCNFR & curNode = TYPE_NODE_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY
rule_466: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_467: repRule = LNCNFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1
rule_468: curLock != TYPE_LOCK_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_469: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_470: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_471: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_472: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_473: replace != TOREP & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_474: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_475: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_476: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_477: node[TYPE_NODE_2].hasLock = true & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_478: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_479: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_480: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_481: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_482: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_483: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_484: curData = TYPE_DATA_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_485: repRule = LNCNFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY
rule_486: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_487: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_488: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_489: curData = TYPE_DATA_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_490: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_491: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_492: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_493: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_494: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curData != TYPE_DATA_1 -> repRule != LNCNFR
rule_495: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_496: curMemory != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_497: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_498: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1
rule_499: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_500: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_501: repRule = LNCNFR & curMemory = TYPE_ADDR_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1
rule_502: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_503: curNode = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_504: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_505: repRule = LNCNFR -> replace != TOREP
rule_506: curLock = TYPE_LOCK_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_507: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & replace != REQREPALL -> repRule != LNCNFR
rule_508: curMemory != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_509: curMemory != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_510: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_511: replace != REQREPALL & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_512: curMemory = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_513: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & curData = TYPE_DATA_2 -> repRule != LNCNFR
rule_514: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_515: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_516: repRule = LNCNFR -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1
rule_517: curData = TYPE_DATA_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_518: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_519: lock[TYPE_LOCK_1].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_520: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_521: repRule = LNCNFR & curCache = TYPE_CACHE_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2
rule_522: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_523: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_524: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_525: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_526: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_527: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_528: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curMemory = TYPE_ADDR_1 -> repRule != LNCNFR
rule_529: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_530: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_531: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curMemory = TYPE_ADDR_1 -> repRule != LNCNFR
rule_532: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_533: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_534: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_535: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_536: repRule = LNCNFR & curNode = TYPE_NODE_1 -> lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true
rule_537: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_538: curData != TYPE_DATA_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_539: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_540: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_541: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_542: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_543: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_544: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_545: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curData = TYPE_DATA_1 -> repRule != LNCNFR
rule_546: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_547: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_548: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curData = TYPE_DATA_2 -> repRule != LNCNFR
rule_549: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_550: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_551: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != DIRTY & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_552: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_553: lock[TYPE_LOCK_1].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_554: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_555: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_556: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_557: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_558: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curLock != TYPE_LOCK_1 -> repRule != LNCNFR
rule_559: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_560: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_561: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_562: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & replace != NON -> repRule != LNCNFR
rule_563: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_564: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].hasLock = true -> repRule != LNCNFR
rule_565: lock[TYPE_LOCK_1].owner = TYPE_NODE_1 & replace = DONE -> repRule != LNCNFR
rule_566: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_567: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_568: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_569: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_570: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_571: lock[TYPE_LOCK_2].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_572: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_573: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_574: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_575: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_576: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_577: replace != RANDINV & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_578: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curData != TYPE_DATA_2 -> repRule != LNCNFR
rule_579: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_580: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curNode = TYPE_NODE_2 -> repRule != LNCNFR
rule_581: curMemory = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_582: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_583: replace != NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_584: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_585: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_586: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_587: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_588: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_589: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_590: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_591: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_592: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_593: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_594: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_595: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_596: curLock = TYPE_LOCK_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_597: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_598: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_599: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_600: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_601: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> lock[TYPE_LOCK_1].beUsed = true
rule_602: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_603: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_604: curLock = TYPE_LOCK_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_605: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_606: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_607: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_608: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_609: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_610: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_611: repRule = LNCNFR -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2
rule_612: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_613: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_614: lock[TYPE_LOCK_2].owner != TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_615: repRule = LNCNFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2
rule_616: lock[TYPE_LOCK_2].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_617: repRule = LNCNFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY
rule_618: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_619: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_620: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_621: curLock != TYPE_LOCK_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_622: lock[TYPE_LOCK_2].beUsed = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_623: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_624: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_625: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_626: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_627: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_628: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curLock != TYPE_LOCK_2 -> repRule != LNCNFR
rule_629: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace = DONE -> repRule != LNCNFR
rule_630: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace != TOREP -> repRule != LNCNFR
rule_631: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_632: lock[TYPE_LOCK_2].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_633: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_634: repRule = LNCNFR & curMemory = TYPE_ADDR_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY
rule_635: curData != TYPE_DATA_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_636: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curData != TYPE_DATA_1 -> repRule != LNCNFR
rule_637: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curData = TYPE_DATA_2 -> repRule != LNCNFR
rule_638: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_639: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_640: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_641: replace != RANDINV & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_642: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_643: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != DIRTY -> repRule != LNCNFR
rule_644: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_645: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_646: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_647: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_648: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_649: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_650: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_651: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_652: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_653: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_654: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != DIRTY -> repRule != LNCNFR
rule_655: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_656: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_657: lock[TYPE_LOCK_1].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_658: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_659: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_660: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_661: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_662: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_663: repRule = LNCNFR & replace = DONE -> lock[TYPE_LOCK_2].owner != TYPE_NODE_2
rule_664: curData != TYPE_DATA_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_665: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_666: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_667: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_668: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_669: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_670: replace != REQREPALL & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_671: replace != NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_672: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_673: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_674: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_675: repRule = LNCNFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2
rule_676: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_677: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_678: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_679: repRule = LNCNFR -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY
rule_680: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_681: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_682: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_683: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_684: replace != RANDINV & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_685: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & replace != NON -> repRule != LNCNFR
rule_686: replace != NON & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_687: curLock != TYPE_LOCK_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_688: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_689: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & curLock = TYPE_LOCK_1 -> repRule != LNCNFR
rule_690: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curLock = TYPE_LOCK_1 -> repRule != LNCNFR
rule_691: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_692: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_693: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_694: node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_695: lock[TYPE_LOCK_2].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_696: curLock = TYPE_LOCK_2 & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_697: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curLock != TYPE_LOCK_2 -> repRule != LNCNFR
rule_698: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_699: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & curNode = TYPE_NODE_1 -> repRule != LNCNFR
rule_700: curNode = TYPE_NODE_2 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_701: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_702: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_703: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & replace = DONE -> repRule != LNCNFR
rule_704: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_705: node[TYPE_NODE_2].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_706: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_707: curNode = TYPE_NODE_1 & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_708: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_709: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace != REQREPALL -> repRule != LNCNFR
rule_710: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_711: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_712: repRule = LNCNFR -> replace != RANDINV
rule_713: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_714: replace != RANDINV & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_715: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> lock[TYPE_LOCK_1].owner != TYPE_NODE_2
rule_716: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curMemory = TYPE_ADDR_2 -> repRule != LNCNFR
rule_717: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curCache = TYPE_CACHE_2 -> repRule != LNCNFR
rule_718: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_719: curLock != TYPE_LOCK_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_720: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_721: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_722: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_723: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_724: curMemory = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_725: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_726: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_1].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_727: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_728: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_729: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_730: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_731: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & replace = DONE -> repRule != LNCNFR
rule_732: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_733: replace != TOREP & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_734: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curData = TYPE_DATA_2 -> repRule != LNCNFR
rule_735: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_736: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_737: replace != TOREP & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_738: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_739: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_740: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_741: replace != RANDINV & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_742: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_743: repRule = LNCNFR & replace = DONE -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1
rule_744: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & curNode = TYPE_NODE_2 -> repRule != LNCNFR
rule_745: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_746: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_747: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_748: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_749: curMemory = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_750: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_751: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_752: node[TYPE_NODE_2].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_753: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curLock = TYPE_LOCK_1 -> repRule != LNCNFR
rule_754: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curLock = TYPE_LOCK_1 -> repRule != LNCNFR
rule_755: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_756: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_757: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_758: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_759: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_760: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_761: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_762: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_763: lock[TYPE_LOCK_1].beUsed = true & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_764: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_765: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curLock = TYPE_LOCK_1 -> repRule != LNCNFR
rule_766: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_767: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_768: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_769: curData = TYPE_DATA_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_770: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_771: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & curNode = TYPE_NODE_1 -> repRule != LNCNFR
rule_772: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_773: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_774: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_775: replace = DONE & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_776: curNode = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_777: lock[TYPE_LOCK_1].owner = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_778: replace != TOREP & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_779: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_780: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_781: curData = TYPE_DATA_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_782: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_783: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & curLock = TYPE_LOCK_1 -> repRule != LNCNFR
rule_784: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_785: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & replace = DONE -> repRule != LNCNFR
rule_786: curLock = TYPE_LOCK_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_787: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_788: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_789: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curData != TYPE_DATA_2 -> repRule != LNCNFR
rule_790: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_791: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_792: repRule = LNCNFR & curNode = TYPE_NODE_1 -> lock[TYPE_LOCK_2].beUsed = true
rule_793: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_794: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_795: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> lock[TYPE_LOCK_1].owner != TYPE_NODE_1
rule_796: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_797: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_798: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_799: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_800: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curLock != TYPE_LOCK_2 -> repRule != LNCNFR
rule_801: repRule = LNCNFR & curNode = TYPE_NODE_1 -> lock[TYPE_LOCK_1].beUsed = true
rule_802: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_803: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_804: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_805: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & replace = DONE -> repRule != LNCNFR
rule_806: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_807: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_808: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_809: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_810: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_811: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_812: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_813: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_814: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_815: repRule = LNCNFR & curCache = TYPE_CACHE_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY
rule_816: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_817: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_818: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_819: curLock = TYPE_LOCK_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_820: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_821: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_822: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curNode != TYPE_NODE_2 -> repRule != LNCNFR
rule_823: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_824: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_825: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_826: replace != TOREP & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_827: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_828: repRule = LNCNFR & curNode = TYPE_NODE_1 -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true
rule_829: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_830: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_831: curData = TYPE_DATA_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_832: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & curNode != TYPE_NODE_1 -> repRule != LNCNFR
rule_833: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY -> repRule != LNCNFR
rule_834: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_835: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_836: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_837: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_838: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_839: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_840: repRule = LNCNFR & replace = DONE -> lock[TYPE_LOCK_2].owner != TYPE_NODE_1
rule_841: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_842: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_843: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_844: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_845: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_846: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_847: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_848: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_849: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_850: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_851: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_852: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2
rule_853: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_854: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_855: curNode = TYPE_NODE_2 & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_856: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_857: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_858: repRule = LNCNFR & curNode = TYPE_NODE_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY
rule_859: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & replace = DONE -> repRule != LNCNFR
rule_860: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_861: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_862: curNode = TYPE_NODE_1 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_863: curNode = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_864: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_865: curMemory != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_866: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_867: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_868: repRule = LNCNFR & replace = DONE -> lock[TYPE_LOCK_1].owner != TYPE_NODE_2
rule_869: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_870: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_871: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_872: replace != REQREPALL & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_873: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_874: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace = DONE -> repRule != LNCNFR
rule_875: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_876: repRule = LNCNFR -> curNode != TYPE_NODE_2
rule_877: curData != TYPE_DATA_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_878: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_879: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_880: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_881: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_882: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curNode != TYPE_NODE_1 -> repRule != LNCNFR
rule_883: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_884: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_885: lock[TYPE_LOCK_2].beUsed = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_886: curNode != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_887: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_888: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_889: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curData = TYPE_DATA_2 -> repRule != LNCNFR
rule_890: curNode = TYPE_NODE_2 & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_891: repRule = LNCNFR -> curNode != TYPE_NODE_1
rule_892: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_893: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_894: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_895: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_896: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_897: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != DIRTY & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_898: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_899: curLock = TYPE_LOCK_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_900: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & curData = TYPE_DATA_2 -> repRule != LNCNFR
rule_901: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & curMemory = TYPE_ADDR_2 -> repRule != LNCNFR
rule_902: replace != TOREP & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_903: replace != TOREP & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_904: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_905: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_906: repRule = LNCNFR & curCache = TYPE_CACHE_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1
rule_907: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_908: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & curNode = TYPE_NODE_2 -> repRule != LNCNFR
rule_909: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_910: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_911: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_912: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_913: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_914: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_915: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_916: curData != TYPE_DATA_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_917: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_918: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_919: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_920: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & replace = DONE -> repRule != LNCNFR
rule_921: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_922: node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_923: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_924: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_925: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != DIRTY & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_926: repRule = LNCNFR -> replace != REQREPALL
rule_927: lock[TYPE_LOCK_2].owner != TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_928: curNode = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_929: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_930: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_931: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_932: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & replace != NON -> repRule != LNCNFR
rule_933: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_934: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_935: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_936: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_937: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_938: replace != NON & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_939: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_940: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curCache = TYPE_CACHE_2 -> repRule != LNCNFR
rule_941: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_942: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_943: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curLock != TYPE_LOCK_1 -> repRule != LNCNFR
rule_944: replace != RANDINV & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_945: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_946: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_947: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_948: curNode = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_949: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_950: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_951: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY
rule_952: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curLock = TYPE_LOCK_1 -> repRule != LNCNFR
rule_953: curLock = TYPE_LOCK_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_954: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != DIRTY & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_955: repRule = LNCNFR & curNode = TYPE_NODE_1 -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true
rule_956: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_957: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_958: node[TYPE_NODE_2].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_959: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_960: node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_961: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_962: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_963: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & replace != REQREPALL -> repRule != LNCNFR
rule_964: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_965: curLock != TYPE_LOCK_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_966: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_967: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_968: node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_969: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_970: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_971: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_972: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != DIRTY -> repRule != LNCNFR
rule_973: curData = TYPE_DATA_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_974: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_975: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_976: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_977: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_978: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_979: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_980: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_981: repRule = LNCNFR & curLock = TYPE_LOCK_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2
rule_982: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_983: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_984: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_985: curData != TYPE_DATA_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_986: lock[TYPE_LOCK_1].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_987: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_988: repRule = LNCNFR & curNode = TYPE_NODE_1 -> lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true
rule_989: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_990: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_991: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_992: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_993: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID -> repRule != LNCNFR
rule_994: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_995: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_996: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_997: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_998: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_999: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_1000: repRule = LNCNFR -> replace != NON
rule_1001: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_1002: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1003: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_1004: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curNode != TYPE_NODE_1 -> repRule != LNCNFR
rule_1005: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_1006: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_1007: curMemory != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1008: node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_1009: node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_1010: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_2] = true -> repRule != LNCNFR
rule_1011: repRule = LNCNFR -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY
rule_1012: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_1013: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1014: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_1015: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_1016: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1017: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curData != TYPE_DATA_1 -> repRule != LNCNFR
rule_1018: lock[TYPE_LOCK_2].beUsed = true & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1019: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_2].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_1020: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1021: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != DIRTY -> repRule != LNCNFR
rule_1022: curMemory != TYPE_ADDR_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1023: repRule = LNCNFR -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1
rule_1024: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1025: curLock = TYPE_LOCK_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1026: replace != RANDINV & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1027: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curNode != TYPE_NODE_1 -> repRule != LNCNFR
rule_1028: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & curMemory = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1029: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_1030: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_1031: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curData = TYPE_DATA_2 -> repRule != LNCNFR
rule_1032: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_1033: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_1034: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_1035: repRule = LNCNFR & curNode = TYPE_NODE_1 -> lock[TYPE_LOCK_2].owner != TYPE_NODE_2
rule_1036: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_1037: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curCache = TYPE_CACHE_2 -> repRule != LNCNFR
rule_1038: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1039: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_1040: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_1041: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_1042: lock[TYPE_LOCK_2].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_1043: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_1044: curData != TYPE_DATA_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1045: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false -> repRule != LNCNFR
rule_1046: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_1047: lock[TYPE_LOCK_2].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_1048: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_1049: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1050: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_1051: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_1052: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & replace = DONE -> repRule != LNCNFR
rule_1053: curCache = TYPE_CACHE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1054: lock[TYPE_LOCK_1].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1055: lock[TYPE_LOCK_1].owner != TYPE_NODE_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_1056: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & replace = DONE -> repRule != LNCNFR
rule_1057: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1058: curLock != TYPE_LOCK_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1059: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_1060: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_1061: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & lock[TYPE_LOCK_2].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1062: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_1063: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1064: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1065: curNode = TYPE_NODE_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_2 -> repRule != LNCNFR
rule_1066: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1067: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_1068: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1069: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & curLock = TYPE_LOCK_2 -> repRule != LNCNFR
rule_1070: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & curLock != TYPE_LOCK_1 -> repRule != LNCNFR
rule_1071: node[TYPE_NODE_2].cache[TYPE_CACHE_2].state = VALID & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1072: curNode != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1073: curNode = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1074: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1075: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_1076: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_1077: node[TYPE_NODE_1].cache[TYPE_CACHE_2].state != INVALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_1078: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_2].data & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_1079: replace != TOREP & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1080: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_1081: lock[TYPE_LOCK_1].owner = TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_1082: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_1083: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_1084: lock[TYPE_LOCK_2].owner != TYPE_NODE_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].state != INVALID -> repRule != LNCNFR
rule_1085: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_1 -> repRule != LNCNFR
rule_1086: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_1087: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1088: lock[TYPE_LOCK_1].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1089: replace = DONE & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1090: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_1091: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_1092: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_1093: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_1094: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_1095: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_1096: replace != RANDINV & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1097: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_1098: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & replace = DONE -> repRule != LNCNFR
rule_1099: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data -> repRule != LNCNFR
rule_1100: node[TYPE_NODE_1].cache[TYPE_CACHE_1].data = memory[TYPE_ADDR_1].data & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1101: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & curMemory = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1102: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1103: node[TYPE_NODE_2].firstRead[TYPE_ADDR_2] = false & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_1104: lock[TYPE_LOCK_1].owner = TYPE_NODE_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1105: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & replace != REQREPALL -> repRule != LNCNFR
rule_1106: node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1107: lock[TYPE_LOCK_1].owner != TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_1108: lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1109: curLock != TYPE_LOCK_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1110: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_1111: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].state = VALID -> repRule != LNCNFR
rule_1112: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 & curData != TYPE_DATA_2 -> repRule != LNCNFR
rule_1113: lock[TYPE_LOCK_2].owner != TYPE_NODE_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data -> repRule != LNCNFR
rule_1114: repRule = LNCNFR & curMemory = TYPE_ADDR_1 -> node[TYPE_NODE_2].cache[TYPE_CACHE_1].state != DIRTY
rule_1115: lock[TYPE_LOCK_2].owner = TYPE_NODE_2 & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1116: lock[TYPE_LOCK_1].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1117: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1118: node[TYPE_NODE_1].firstRead[TYPE_ADDR_2] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1119: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1120: node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 & curCache = TYPE_CACHE_1 -> repRule != LNCNFR
rule_1121: node[TYPE_NODE_1].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_1].data & node[TYPE_NODE_1].cache[TYPE_CACHE_2].addr != TYPE_ADDR_2 -> repRule != LNCNFR
rule_1122: node[TYPE_NODE_2].cache[TYPE_CACHE_2].data = memory[TYPE_ADDR_2].data & lock[TYPE_LOCK_2].owner != TYPE_NODE_2 -> repRule != LNCNFR
rule_1123: node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1124: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1125: curLock = TYPE_LOCK_2 & node[TYPE_NODE_2].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1126: lock[TYPE_LOCK_1].beUsed = true & node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1127: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & node[TYPE_NODE_1].firstRead[TYPE_ADDR_1] = false -> repRule != LNCNFR
rule_1128: node[TYPE_NODE_2].cache[TYPE_CACHE_2].addr != TYPE_ADDR_1 & curNode = TYPE_NODE_2 -> repRule != LNCNFR
rule_1129: replace = DONE & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_2 -> repRule != LNCNFR
rule_1130: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != NLNCR
rule_1131: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LCFR
rule_1132: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1133: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCNFR
rule_1134: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LCFR
rule_1135: node[TYPE_NODE_1].hasLock = true & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1136: replace = NON -> repRule != LNCNFR
rule_1137: lock[TYPE_LOCK_1].beUsed = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1138: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCW
rule_1139: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & lock[TYPE_LOCK_1].beUsed = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1140: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1141: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1142: node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1143: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1144: replace = NON -> repRule != NLNCR
rule_1145: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_1146: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != LCFR
rule_1147: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1148: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != LNCFR
rule_1149: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> lock[TYPE_LOCK_2].beUsed = true
rule_1150: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCW
rule_1151: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1152: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> lock[TYPE_LOCK_2].beUsed = true
rule_1153: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != NLNCR
rule_1154: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != LNCFR
rule_1155: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCFR
rule_1156: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LCFR
rule_1157: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCR
rule_1158: replace = NON -> repRule != LCFR
rule_1159: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCFR
rule_1160: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != LNCNFR
rule_1161: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> replace != TOREP
rule_1162: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LCFR
rule_1163: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != NLNCW
rule_1164: replace = NON -> repRule != NLNCW
rule_1165: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCR
rule_1166: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1167: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCR
rule_1168: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_1169: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> repRule != NLNCW
rule_1170: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_1171: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCFR
rule_1172: node[TYPE_NODE_1].hasLock = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> replace != TOREP
rule_1173: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCW
rule_1174: replace = NON -> repRule != LNCFR
rule_1175: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1176: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state != INVALID -> lock[TYPE_LOCK_2].beUsed = true
rule_1177: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr = TYPE_ADDR_1 -> repRule != NLNCW
rule_1178: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCFR
rule_1179: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LCFR
rule_1180: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != NLNCR
rule_1181: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCFR
rule_1182: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LCFR
rule_1183: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != NLNCR
rule_1184: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCW
rule_1185: node[TYPE_NODE_1].hasLock = true & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1186: replace = NON -> repRule != LNCNFR
rule_1187: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LCFR
rule_1188: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCW
rule_1189: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1190: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & lock[TYPE_LOCK_1].beUsed = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1191: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != NLNCW
rule_1192: replace = NON -> repRule != NLNCR
rule_1193: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_1194: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != LCFR
rule_1195: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LCFR
rule_1196: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCW
rule_1197: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> lock[TYPE_LOCK_2].beUsed = true
rule_1198: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != LNCFR
rule_1199: node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1200: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCFR
rule_1201: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCR
rule_1202: replace = NON -> repRule != LCFR
rule_1203: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LCFR
rule_1204: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != NLNCW
rule_1205: replace = NON -> repRule != NLNCW
rule_1206: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCR
rule_1207: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> lock[TYPE_LOCK_2].beUsed = true
rule_1208: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCR
rule_1209: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_1210: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != NLNCR
rule_1211: replace = NON & lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true -> repRule != LNCNFR
rule_1212: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCNFR
rule_1213: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != LNCFR
rule_1214: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCFR
rule_1215: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCW
rule_1216: lock[TYPE_LOCK_2].inProtection[TYPE_ADDR_1] = true & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> lock[TYPE_LOCK_2].beUsed = true
rule_1217: replace = NON -> repRule != LNCFR
rule_1218: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1219: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCFR
rule_1220: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].addr != TYPE_ADDR_1 -> repRule != LNCNFR
rule_1221: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LCFR
rule_1222: replace = NON & node[TYPE_NODE_1].cache[TYPE_CACHE_1].state = INVALID -> repRule != NLNCR
rule_1223: lock[TYPE_LOCK_1].beUsed = false & replace = NON -> repRule != LNCNFR
rule_1224: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCFR
rule_1225: lock[TYPE_LOCK_1].beUsed = false & replace = NON -> repRule != NLNCR
rule_1226: replace = NON -> repRule != LNCNFR
rule_1227: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LCFR
rule_1228: lock[TYPE_LOCK_1].beUsed = false -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false
rule_1229: replace = NON -> repRule != NLNCR
rule_1230: lock[TYPE_LOCK_1].beUsed = false & node[TYPE_NODE_1].hasLock = false -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false
rule_1231: lock[TYPE_LOCK_1].beUsed = false & replace = NON -> repRule != LCFR
rule_1232: lock[TYPE_LOCK_1].beUsed = false & node[TYPE_NODE_1].hasLock = false -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = false
rule_1233: lock[TYPE_LOCK_1].beUsed = false & replace = NON -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = false
rule_1234: replace = NON -> repRule != LCFR
rule_1235: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCW
rule_1236: lock[TYPE_LOCK_1].beUsed = false & replace = NON -> repRule != LNCFR
rule_1237: replace = NON -> repRule != NLNCW
rule_1238: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != LNCNFR
rule_1239: lock[TYPE_LOCK_1].beUsed = false & replace = NON -> repRule != NLNCW
rule_1240: lock[TYPE_LOCK_1].beUsed = false -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_2] = false
rule_1241: replace = NON -> repRule != LNCFR
rule_1242: lock[TYPE_LOCK_1].beUsed = false & replace = NON -> lock[TYPE_LOCK_1].inProtection[TYPE_ADDR_1] = false
rule_1243: replace = NON & node[TYPE_NODE_1].hasLock = false -> repRule != NLNCR
rule_1244: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LCFR
rule_1245: replace = NON -> repRule != LNCNFR
rule_1246: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCW
rule_1247: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCNFR
rule_1248: replace = NON -> repRule != NLNCR
rule_1249: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCW
rule_1250: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LNCFR
rule_1251: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != NLNCR
rule_1252: replace = NON -> repRule != LCFR
rule_1253: replace = NON -> repRule != NLNCW
rule_1254: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCR
rule_1255: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != NLNCR
rule_1256: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCNFR
rule_1257: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LNCFR
rule_1258: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != NLNCW
rule_1259: replace = NON -> repRule != LNCFR
rule_1260: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCNFR
rule_1261: replace = NON & lock[TYPE_LOCK_1].owner = TYPE_NODE_1 -> repRule != LNCFR
rule_1262: replace = NON & lock[TYPE_LOCK_1].beUsed = true -> repRule != LCFR
rule_1263: replace = NON & node[TYPE_NODE_1].hasLock = true -> repRule != LCFR
